// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	entity "github.com/AnnV0lokitina/diplom/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddNewOrder mocks base method.
func (m *MockService) AddNewOrder(ctx context.Context, sessionID, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", ctx, sessionID, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewOrder indicates an expected call of AddNewOrder.
func (mr *MockServiceMockRecorder) AddNewOrder(ctx, sessionID, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockService)(nil).AddNewOrder), ctx, sessionID, orderNumber)
}

// GetOrderList mocks base method.
func (m *MockService) GetOrderList(ctx context.Context, sessionID string) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderList", ctx, sessionID)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderList indicates an expected call of GetOrderList.
func (mr *MockServiceMockRecorder) GetOrderList(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderList", reflect.TypeOf((*MockService)(nil).GetOrderList), ctx, sessionID)
}

// GetUserBalance mocks base method.
func (m *MockService) GetUserBalance(ctx context.Context, sessionID string) (*entity.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, sessionID)
	ret0, _ := ret[0].(*entity.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockServiceMockRecorder) GetUserBalance(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockService)(nil).GetUserBalance), ctx, sessionID)
}

// GetUserWithdrawals mocks base method.
func (m *MockService) GetUserWithdrawals(ctx context.Context, sessionID string) ([]*entity.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, sessionID)
	ret0, _ := ret[0].([]*entity.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockServiceMockRecorder) GetUserWithdrawals(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockService)(nil).GetUserWithdrawals), ctx, sessionID)
}

// LoginUser mocks base method.
func (m *MockService) LoginUser(ctx context.Context, login, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, login, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceMockRecorder) LoginUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockService)(nil).LoginUser), ctx, login, password)
}

// RegisterUser mocks base method.
func (m *MockService) RegisterUser(ctx context.Context, login, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, login, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServiceMockRecorder) RegisterUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockService)(nil).RegisterUser), ctx, login, password)
}

// UserOrderWithdraw mocks base method.
func (m *MockService) UserOrderWithdraw(ctx context.Context, sessionID, orderNumber string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrderWithdraw", ctx, sessionID, orderNumber, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserOrderWithdraw indicates an expected call of UserOrderWithdraw.
func (mr *MockServiceMockRecorder) UserOrderWithdraw(ctx, sessionID, orderNumber, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrderWithdraw", reflect.TypeOf((*MockService)(nil).UserOrderWithdraw), ctx, sessionID, orderNumber, sum)
}
